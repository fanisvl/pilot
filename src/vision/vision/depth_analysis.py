"""
3 approaches:

1) Calculate the disparity map of the entire original image and use it to calculate depth of bounding box area *

2) Calculate the disparity map of the bounding box area and use it to calculate depth of bounding box area, not all that good 
considering that the cropping of the images would have to be perfect in order for this to actually work correctly

3) Calculate the disparity map of the entire original image and focus on a point at the middle of the lower half of the bounding box
in order to get the depth by just using the formula

2 isn't really viable as stated so we will go with 1 and/or 3
"""

import cv2
import numpy as np

def calculate_depth(focal_length, baseline, size_of_pixel, bb_coords, choice=1):
    """Get the disparity map generated by the 2 images"""
    # Load the left and right images in grayscale
    left_img = cv2.imread('left.png', cv2.IMREAD_GRAYSCALE)
    right_img = cv2.imread('right.png', cv2.IMREAD_GRAYSCALE)

    # Create a StereoBM object
    stereo = cv2.StereoBM_create(numDisparities=16, blockSize=15)

    # Compute the disparity map
    disparity = stereo.compute(left_img, right_img)

    # Normalize the disparity map
    disparity = cv2.normalize(disparity, disparity, alpha=0, beta=255, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_8U)

    x1, y1, x2, y2 = bb_coords # CAREFUL!!!, these coords need to correspond to the bounding box of the LEFT image
    """Now that we have the disparity map, we can focus on a single point or get the average disparity of the bounding box"""
    if (choice==1):
        # Oprion 1
        bb_disparity = disparity[y1:y2, x1:x2]
        avrg_dispartiy = np.mean(bb_disparity)
        
        # Calculate the depth
        depth = (focal_length/size_of_pixel)*(baseline/avrg_dispartiy)
        return depth
    else:
        # Option 3
        x = (x2-x1)//2
        y = ((y2-y1)//3)*2
        disparity_val = disparity[y, x]
        depth = (focal_length/size_of_pixel)*(baseline/disparity_val)
        return depth

    